using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Media;
using System.Diagnostics;
using System.Runtime.InteropServices;
using Microsoft.Win32;
using System.IO;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Reflection.Emit;
using System.Diagnostics.Eventing.Reader;
using System.Text.RegularExpressions;

namespace FakeMalware._0
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
            
        }
        //
        //FAKE VIRUS V1.0
        //
        System.Media.SoundPlayer PlaySound = new System.Media.SoundPlayer(Properties.Resources.hello_your_computer_has_virus);
        Random Rand = new Random();
        int EventNum = 1;
        int CloseDo = 0;
        private static bool[] CanDo = new bool[31];
        private bool dragging = false;
        private bool dragging1 = false;
        private Point dragCursorPoint;
        private Point dragFormPoint;
        bool s1, s2, s3, s4;
        bool ownEvents = false;
        int eventLong = 0;
        string[] EventArray = new string[1000];
        string[] PanelArray = new string[1000];
        string autoLoad = "autostart.json";
        [DllImport("user32.dll")]

        public static extern IntPtr SendMessageW(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam);
        private const int APPCOMMAND_VOLUME_DOWN = 0x90000;
        private const int APPCOMMAND_VOLUME_UP = 0xA0000;
        private const int WM_APPCOMMAND = 0x319;

        private void MainForm_Load(object sender, EventArgs e)
        {
            // custom cmd load
            string[] args = Environment.GetCommandLineArgs();
            if (args.Length > 1)
            {
                autoLoad = args[1];
            }
            //autostart load
            if (File.Exists(Application.StartupPath + "\\" + autoLoad))
            {
                this.Opacity = 0;
                this.ShowInTaskbar = false;
                string jsonContent = File.ReadAllText(autoLoad);
                dynamic data = JsonConvert.DeserializeObject(jsonContent);
                SetTimeBox.Value = data["timetostart"];
                TimeMin.Value = data["timerepeatmin"];
                TimeMax.Value = data["timerepeatmax"];
                checkBoxSound.Checked = data["sound"];
                string datasplits = data["classicevents"];
                string[] classice = Regex.Split(datasplits, ";");
                foreach (string classiceString in classice)
                {
                    foreach(Control control in EventPanel.Controls)
                    {
                        if (control is CheckBox check && classiceString != "")
                            if (check.TabIndex == Convert.ToInt32(classiceString))
                                check.Checked = true;
                    }
                }
                
                foreach (dynamic item in data["events"])
                {
                    if (item["name"] == "sef")
                    {
                        //transparent color
                        if (item["R"] != null && item["R"] != 404)
                        {
                            int r = item["R"];
                            int g = item["G"];
                            int b = item["B"];
                            this.TransparencyKey = Color.FromArgb(r, g, b);
                        }
                        //sound
                        if (item["music"] != null)
                        {
                            System.Media.SoundPlayer soundplayer = new System.Media.SoundPlayer(Application.StartupPath + @"\" + data["folder"] + @"\" + item["music"]);
                            if (item["musicmode"] == 0)
                                soundplayer.Play();
                            if (item["musicmode"] == 1)
                                soundplayer.PlayLooping();
                        }
                    }
                }
            }
            //normal load
            s1 = Settings1.Default.PlaySounds;
            s2 = Settings1.Default.Help;
            s3 = Settings1.Default.Round;
            s4 = Settings1.Default.StartAnimation;
            if (s1)
                checkBoxSound.Checked = true;
            else
                checkBoxSound.Checked = false;
            if (s2)
                checkBoxHelp.Checked = true;
            else
                checkBoxHelp.Checked = false;
            if (s3)
                checkBoxRound.Checked = true;
            else
                checkBoxRound.Checked = false;
            if (s4)
                checkBoxStart.Checked = true;
            else
                checkBoxStart.Checked = false;
            if (Settings1.Default.AutoStart)
                autoCheck.Checked = true;
            SaveChange();
            //Load custom events
            string[] jsonFiles = Directory.GetFiles(Application.StartupPath, "*.json");
            int btnY = 0;
            int panelY = 0;
            foreach (string file in jsonFiles)
            {
                string jsonContent = File.ReadAllText(file);
                dynamic data = JsonConvert.DeserializeObject(jsonContent);
                if (data["packname"] != null)
                {
                    var checkbox = new CheckBox();
                    checkbox.ForeColor = Color.Lime;
                    checkbox.Text = data["packname"] + " - by " + data["author"];
                    checkbox.Tag = file;
                    checkbox.Size = new Size(230, 30);
                    checkbox.CheckedChanged += eventCheck;
                    checkbox.Location = new Point(0, btnY);
                    btnY += 25;
                    ListBox.Controls.Add(checkbox);

                    //the events
                    Panel panel = new Panel();
                    panel.Location = new Point(0, panelY);
                    panel.AutoSize = true;
                    panel.BackColor = Color.Black;
                    panel.Tag = file;
                    panel.Visible = false;
                    CustomEventList.Controls.Add(panel);
                    System.Windows.Forms.Label label = new System.Windows.Forms.Label();
                    label.Text = data["packname"] + " - by " + data["author"];
                    label.Width = 350;
                    label.ForeColor = Color.Red;
                    label.Font = new Font("Consolas", 12);
                    panel.Controls.Add(label);
                    int ckeY = 20;
                    foreach (dynamic E in data["events"])
                    {
                        var check = new CheckBox();
                        check.ForeColor = Color.Lime;
                        check.Text = E["name"];
                        check.Font = new Font("Consolas", 8);
                        check.Tag = E["name"];
                        check.Location = new Point(10, ckeY);
                        ckeY += 20;
                        panel.Controls.Add(check);
                    }
                    panelY += panel.Height;
                }
            }
            //load autostart custom events
            if (File.Exists(Application.StartupPath + "\\" + autoLoad))
            {
                string jsonContent = File.ReadAllText(autoLoad);
                dynamic data = JsonConvert.DeserializeObject(jsonContent);
                if (data["events"] != null)
                {
                    EventCheckBox.Checked = true;
                    foreach (dynamic item in data["events"])
                    {
                        if (item["pevent"] != "" && item["pevent"] != null)
                        {
                            string datasplits = Convert.ToString(item["pevent"]);
                            string[] classice = Regex.Split(datasplits, ";");
                            foreach (Panel panel in CustomEventList.Controls)
                            {
                                if (Convert.ToString(panel.Tag) == Convert.ToString(item["json"]))
                                {
                                    panel.Visible = true;
                                    foreach (Control control in panel.Controls)
                                        foreach (string classiceString in classice)
                                            if (control is CheckBox check)
                                                if (check.Text == classiceString)
                                                {
                                                    check.Checked = true;
                                                }
                                }
                            }
                        }
                    }
                }
                start();
            }
        }

        private void eventCheck(object sender, EventArgs e)
        {
            CheckBox checkbox = (CheckBox)sender;
            if (checkbox.Checked)
            {
                foreach (Panel panel in CustomEventList.Controls)
                {
                    if (panel.Tag == checkbox.Tag)
                        panel.Visible = true;
                }
            }
            else
            {
                foreach (Panel panel in CustomEventList.Controls)
                {
                    if (panel.Tag == checkbox.Tag)
                        panel.Visible = false;
                }
            }
        }

        private void start()
        {
            try
            {
                //custom
                foreach (Panel panel in CustomEventList.Controls)
                {
                    if (panel.Visible == true)
                    {
                        foreach (Control control in panel.Controls)
                        {
                            if (control is CheckBox check)
                            {
                                if (check.Checked)
                                {
                                    eventLong++;
                                    EventArray[eventLong] = check.Tag.ToString();
                                    PanelArray[eventLong] = panel.Tag.ToString();
                                }
                            }
                        }
                    }
                }
                //normal
                StartTimer.Interval = Convert.ToInt32(SetTimeBox.Text) * 1000;
                if (checkBoxSound.Checked)
                    Settings1.Default.PlaySounds = true;
                else
                    Settings1.Default.PlaySounds = false;

                Settings1.Default.DeadMode = comboBoxWindows.Text;
                Settings1.Default.ScorpionPassword = ScorpionBox.Text;
                Settings1.Default.MatrixName = NameBox.Text;
                Settings1.Default.WhatText = WhatBox.Text;
                Settings1.Default.CoffinText = DanceBox.Text;
                Settings1.Default.RestartMode = RestartBox.Text;

                CanDo[0] = checkBox0.Checked;
                CanDo[1] = checkBox1.Checked;
                CanDo[2] = checkBox2.Checked;
                CanDo[3] = checkBox3.Checked;
                CanDo[4] = checkBox4.Checked;
                CanDo[5] = checkBox5.Checked;
                CanDo[6] = checkBox6.Checked;
                CanDo[7] = checkBox7.Checked;
                CanDo[8] = checkBox8.Checked;
                CanDo[9] = checkBox9.Checked;
                CanDo[10] = checkBox10.Checked;
                CanDo[11] = checkBox11.Checked;
                CanDo[12] = checkBox12.Checked;
                CanDo[13] = checkBox13.Checked;
                CanDo[14] = checkBox14.Checked;
                CanDo[15] = checkBox15.Checked;
                CanDo[16] = checkBox16.Checked;
                CanDo[17] = checkBox17.Checked;
                CanDo[18] = checkBox18.Checked;
                CanDo[19] = checkBox19.Checked;
                CanDo[20] = checkBox20.Checked;
                CanDo[21] = checkBox21.Checked;
                CanDo[22] = checkBox22.Checked;
                CanDo[23] = checkBox23.Checked;
                CanDo[24] = checkBox24.Checked;
                CanDo[25] = checkBox25.Checked;

                for (int i = 0; i <= 25 && CanDo[i] == false; i++)
                    CloseDo++;
                if (CloseDo > 25 && eventLong == 0)
                {
                    MessageBox.Show("ERROR", "");
                    CloseDo = 0;
                    eventLong = 0;
                    return;
                }
                CloseDo = 0;

                StartTimer.Start();
                this.Hide();
            }
            catch
            {
                MessageBox.Show("Fatal error", "Fake Malware", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnStart_Click(object sender, EventArgs e)
        {
            start();
        }

        private void StartTimer_Tick(object sender, EventArgs e)
        {
            StartTimer.Stop();
            EventTimer.Start();
        }


        private void EventTimer_Tick(object sender, EventArgs e)
        {
            EventTimer.Stop();
            EventTimer.Interval = Rand.Next(Convert.ToInt32(TimeMin.Value) * 1000, Convert.ToInt32(TimeMax.Value + 1) * 1000);
            do
            {
                if (ownEvents == true && Rand.Next(0, 4) == 3)
                { 
                    SpecialEvent se = new SpecialEvent();
                    int ran = Rand.Next(1, eventLong + 1);
                    se.Event = EventArray[ran];
                    se.Json = PanelArray[ran];
                    se.ShowDialog();
                }
                else
                    EventNum = Rand.Next(0, 25 + 1);
            }
            while (CanDo[EventNum] == false);

            if (EventNum == 0 && CanDo[0] == true)
                Event0();
            if (EventNum == 1 && CanDo[1] == true)
                Event1();
            if (EventNum == 2 && CanDo[2] == true)
                Event2();
            if (EventNum == 3 && CanDo[3] == true)
                Event3();
            if (EventNum == 4 && CanDo[4] == true)
                Event4();
            if (EventNum == 5 && CanDo[5] == true)
                Event5();
            if (EventNum == 6 && CanDo[6] == true)
                Event6();
            if (EventNum == 7 && CanDo[7] == true)
                Event7();
            if (EventNum == 8 && CanDo[8] == true)
                Event8();
            if (EventNum == 9 && CanDo[9] == true)
                Event9();
            if (EventNum == 10 && CanDo[10] == true)
                Event10();
            if (EventNum == 11 && CanDo[11] == true)
                Event11();
            if (EventNum == 12 && CanDo[12] == true)
                Event12();
            if (EventNum == 13 && CanDo[13] == true)
                Event13();
            if (EventNum == 14 && CanDo[14] == true)
                Event14();
            if (EventNum == 15 && CanDo[15] == true)
                Event15();
            if (EventNum == 16 && CanDo[16] == true)
                Event16();
            if (EventNum == 17 && CanDo[17] == true)
                Event17();
            if (EventNum == 18 && CanDo[18] == true)
                Event18();
            if (EventNum == 19 && CanDo[19] == true)
                Event19();
            if (EventNum == 20 && CanDo[20] == true)
                Event20();
            if (EventNum == 21 && CanDo[21] == true)
                Event21();
            if (EventNum == 22 && CanDo[22] == true)
                Event22();
            if (EventNum == 23 && CanDo[23] == true)
                Event23();
            if (EventNum == 24 && CanDo[24] == true)
                Event24();
            if (EventNum == 25 && CanDo[25] == true)
                Event25();
            EventTimer.Start();
        }

        public static void StartIdiot()
        {
            YouAreAnIdiot yaai = new YouAreAnIdiot();
            yaai.Show();
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            //var window = MessageBox.Show("Close the window?","Are you sure?",MessageBoxButtons.YesNo);
            //e.Cancel = (window == DialogResult.No);
        }

        private void TryTest_Click(object sender, EventArgs e)
        {
            if (checkBoxSound.Checked)
                Settings1.Default.PlaySounds = true;
            else
                Settings1.Default.PlaySounds = false;

            Settings1.Default.DeadMode = comboBoxWindows.Text;
            Settings1.Default.ScorpionPassword = ScorpionBox.Text;
            Settings1.Default.MatrixName = NameBox.Text;
            Settings1.Default.WhatText = WhatBox.Text;
            Settings1.Default.CoffinText = DanceBox.Text;
            Settings1.Default.RestartMode = RestartBox.Text;

            if (TryValue.Value == 0)
                Event0();
            if (TryValue.Value == 1)
                Event1();
            if (TryValue.Value == 2)
                Event2();
            if (TryValue.Value == 3)
                Event3();
            if (TryValue.Value == 4)
                Event4();
            if (TryValue.Value == 5)
                Event5();
            if (TryValue.Value == 6)
                Event6();
            if (TryValue.Value == 7)
                Event7();
            if (TryValue.Value == 8)
                Event8();
            if (TryValue.Value == 9)
                Event9();
            if (TryValue.Value == 10)
                Event10();
            if (TryValue.Value == 11)
                Event11();
            if (TryValue.Value == 12)
                Event12();
            if (TryValue.Value == 13)
                Event13();
            if (TryValue.Value == 14)
                Event14();
            if (TryValue.Value == 15)
                Event15();
            if (TryValue.Value == 16)
                Event16();
            if (TryValue.Value == 17)
                Event17();
            if (TryValue.Value == 18)
                Event18();
            if (TryValue.Value == 19)
                Event19();
            if (TryValue.Value == 20)
                Event20();
            if (TryValue.Value == 21)
                Event21();
            if (TryValue.Value == 22)
                Event22();
            if (TryValue.Value == 23)
                Event23();
            if (TryValue.Value == 24)
                Event24();
            if (TryValue.Value == 25)
                Event25();
        }
        //
        //EVENTS
        //
        private void Event0()
        {
            MatrixScreen matrix = new MatrixScreen();
            matrix.ShowDialog();
        }
        private void Event1()
        {
            for (int DoTwenty = 0; DoTwenty <= 20; DoTwenty++)
            {
                this.Icon = Properties.Resources.IconGoogleChrome;
                MessageBox.Show("Application update failed!", "Google Chrome", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }
        private void Event2()
        {
            this.Icon = Properties.Resources.IconMicrosoftStore;
            MessageBox.Show("Downloading stop working", "Mincrosoft Store", MessageBoxButtons.AbortRetryIgnore, MessageBoxIcon.Error);
        }
        private void Event3()
        {
            PlaySound.Play();
            MessageBox.Show("Hello, Your Computer Has Virus", "Virus", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        private void Event4()
        {
            var VirusDownload = MessageBox.Show("Want you realy download Virus?", "Virus", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (VirusDownload == DialogResult.Yes)
            {
                FakeVirusDownload VDownload = new FakeVirusDownload();
                VDownload.ShowDialog();
            }
            else
                MessageBox.Show("you cannot perform this action!", "Virus", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
        private void Event5()
        {
            PictureInScreen PictureIS = new PictureInScreen();
            PictureIS.ShowDialog();
        }
        private void Event6()
        {
            PictureInScreen2 PictureIS2 = new PictureInScreen2();
            PictureIS2.ShowDialog();
        }
        private void Event7()
        {
            for (int i = 0; i <= 50; i++)
                SendMessageW(this.Handle, WM_APPCOMMAND, this.Handle, (IntPtr)APPCOMMAND_VOLUME_DOWN);
            System.Threading.Thread.Sleep(2500);
            Cursor.Hide();
            DeadScreenForm BlueDead = new DeadScreenForm();
            BlueDead.ShowDialog();
            Cursor.Show();
            for (int i = 0; i <= 10; i++)
                SendMessageW(this.Handle, WM_APPCOMMAND, this.Handle, (IntPtr)APPCOMMAND_VOLUME_UP);
        }
        private void Event8()
        {
            PictureInScreen3 screen3 = new PictureInScreen3();
            screen3.ShowDialog();
        }
        private void Event9()
        {
            ScorpionVirus scorpion = new ScorpionVirus();
            scorpion.ShowDialog();
        }
        private void Event10()
        {
            for (int i = 0; i < Convert.ToInt32(IdiotBox.Value) - 1; i++)
            {
                YouAreAnIdiot.startX = Rand.Next(0, Screen.PrimaryScreen.Bounds.Width);
                YouAreAnIdiot.startY = Rand.Next(0, Screen.PrimaryScreen.Bounds.Height);
                StartIdiot();
            }
            YouAreAnIdiot.startX = Rand.Next(0, Screen.PrimaryScreen.Bounds.Width);
            YouAreAnIdiot.startY = Rand.Next(0, Screen.PrimaryScreen.Bounds.Height);
            YouAreAnIdiot yaai = new YouAreAnIdiot();
            yaai.ShowDialog();
        }
        private void Event11()
        {
            Jumpscare jupscare = new Jumpscare();
            jupscare.ShowDialog();
        }
        private void Event12()
        {
            try
            {
                ProcessStartInfo ps = new ProcessStartInfo();
                ps.FileName = "cmd.exe";
                ps.WindowStyle = ProcessWindowStyle.Hidden;
                ps.Arguments = @"/c taskkill /IM opera.exe /F & taskkill /IM chrome.exe /F & taskkill /IM msedge.exe /F & taskkill /IM firefox.exe /F";
                Process.Start(ps);
                MessageBox.Show("FATAL_UPDATE_ERROR_1050", "Windows Default Browser Updater", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch { MessageBox.Show("Fuck you man,What ta fuck?"); }
        }
        private void Event13()
        {
            WhyAreYouGay wayg = new WhyAreYouGay();
            wayg.ShowDialog();
        }
        private void Event14()
        {
            CoffinDance cofd = new CoffinDance();
            cofd.ShowDialog();
        }
        private void Event15()
        {
            DrLivesayWalk dlw = new DrLivesayWalk();
            dlw.ShowDialog();
        }
        private void Event16()
        {
            whatmeme what = new whatmeme();
            what.ShowDialog();
        }
        private void Event17()
        {
            int j =Convert.ToInt32(Adbox.Value);
            for (int i = 0; i <= j; i++)
            {
                AddWare ad = new AddWare();
                ad.Show();
            }
        }
        private void Event18()
        {
            ProcessStartInfo ps = new ProcessStartInfo();
            ps.FileName = "cmd.exe";
            ps.WindowStyle = ProcessWindowStyle.Normal;
            ps.Arguments = @"/c color 4 & title command prompt & ipconfig/all";
            for (int i = 0; i < CmdBox.Value; i++)
                Process.Start(ps);
        }
        private void Event19()
        {
            for (int i = 0; i <= 50; i++)
                SendMessageW(this.Handle, WM_APPCOMMAND, this.Handle, (IntPtr)APPCOMMAND_VOLUME_DOWN);
            System.Threading.Thread.Sleep(2500);
            Cursor.Hide();
            RestartScreenForm rcf = new RestartScreenForm();
            rcf.ShowDialog();
            Cursor.Show();
            for (int i = 0; i <= 10; i++)
                SendMessageW(this.Handle, WM_APPCOMMAND, this.Handle, (IntPtr)APPCOMMAND_VOLUME_UP);
        }
        private void Event20()
        {
            SUS sus = new SUS();
            sus.ShowDialog();
        }
        private void Event21()
        {
            polishcow cow = new polishcow();
            cow.ShowDialog();
        }
        private void Event22()
        {
            Point LastCursor = new Point();
            int LagTime = 1;
            for (int i = 0;i <= 500;i++)
            {
                LagTime = Rand.Next(10, 100);
                System.Threading.Thread.Sleep(LagTime);
                LastCursor = Cursor.Position;
                System.Threading.Thread.Sleep(LagTime);
                Cursor.Position = LastCursor;
            }
        }
        private void Event23()
        {
            freeze freezescreen = new freeze();
            freezescreen.ShowDialog();
        }
        private void Event24()
        {
            Flashbang flash = new Flashbang();
            flash.ShowDialog();
        }
        private void Event25()
        {
            ProcessStartInfo ps = new ProcessStartInfo();
            ps.FileName = "cmd.exe";
            ps.WindowStyle = ProcessWindowStyle.Hidden;
            ps.Arguments = "/c shutdown /l";
            Process.Start(ps);
        }
        //
        //BUTTON FUNCTIONS
        //
        private void autoCheck_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                RegistryKey rk = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);

                if (autoCheck.Checked)
                {
                    rk.SetValue("FakeMalware", Application.ExecutablePath);
                    Settings1.Default.AutoStart = true;
                }
                else
                {
                    rk.DeleteValue("FakeMalware", false);
                    Settings1.Default.AutoStart = false;
                }
                rk.Close();
                Settings1.Default.Save();
            }
            catch { }
        }

        private void btnSS_Click(object sender, EventArgs e)
        {
            string classic = "";
            for (int i = 0; i <= 25; i++)
            {
                foreach (Control control in EventPanel.Controls)
                {
                    if (control is CheckBox check)
                        if (check.TabIndex == i && check.Checked)
                            classic += i + ";";
                }
            }
            var data = new
            {
                timetostart = Convert.ToInt32(SetTimeBox.Value),
                timerepeatmin = Convert.ToInt32(TimeMin.Value),
                timerepeatmax = Convert.ToInt32(TimeMax.Value),
                sound = checkBoxSound.Checked,
                classicevents = classic,
                events = new List<dynamic>()
            };
            if (EventCheckBox.Checked)
            {
                foreach (Panel panel in CustomEventList.Controls)
                {
                    string cclassic = "";
                    foreach (Control control in panel.Controls)
                    {
                        if (control is CheckBox check)
                            if (check.Checked)
                                cclassic += Convert.ToString(check.Tag) + ";";
                    }
                    dynamic cevent = new
                    {
                        json = Convert.ToString(panel.Tag),
                        pevent = cclassic
                    };
                    data.events.Add(cevent);
                }
            }
            string jsonData = JsonConvert.SerializeObject(data, Formatting.Indented);
            File.WriteAllText(Application.StartupPath + @"\autostart.json", jsonData);
        }
        private void btnClose_Click(object sender, EventArgs e)
        {
            var window = MessageBox.Show("Close the window?", "Are you sure?", MessageBoxButtons.YesNo);
            if (window == DialogResult.Yes)
                Application.Exit();
        }

        private void btnMaximalize_Click(object sender, EventArgs e)
        {
            if (WindowState == FormWindowState.Normal)
                this.WindowState = FormWindowState.Maximized;
            else
                this.WindowState = FormWindowState.Normal;
        }

        private void btnMinimalize_Click(object sender, EventArgs e)
        {
            this.WindowState = FormWindowState.Minimized;
        }

        private void top_panel_MouseDown(object sender, MouseEventArgs e)
        {
            dragging = true;
            dragCursorPoint = Cursor.Position;
            dragFormPoint = this.Location;
        }

        private void top_panel_MouseMove(object sender, MouseEventArgs e)
        {
            if (dragging)
            {
                Point dif = Point.Subtract(Cursor.Position, new Size(dragCursorPoint));
                this.Location = Point.Add(dragFormPoint, new Size(dif));
            }
        }

        private void top_panel_MouseUp(object sender, MouseEventArgs e)
        {
            dragging = false;
        }

        private void MainForm_SizeChanged(object sender, EventArgs e)
        {
            top_panel.Width = this.Width;
            btnClose.Left = this.Width - 49;
            btnMaximalize.Left = this.Width - 99;
            btnMinimalize.Left = this.Width - 149;
            RightDownBox.Left = this.Width - 10;
            RightDownBox.Top = this.Height - 10;
            groupBox1.Left = this.Width - groupBox1.Width - 10;
            groupBox2.Left = this.Width - groupBox2.Width - 10;
            groupBox2.Top = this.Height - groupBox2.Height - 10;
            RightBox.Left = this.Width - RightBox.Width;
            groupBox3.Left = this.Width - groupBox3.Width - 10;
            EventPanel.Height = this.Height - 70;
            RoundBox2.Top = this.Height - 20;
            RoundBox3.Top = this.Height - 20;
            RoundBox3.Left = this.Width - 20;
        }

        private void MainForm_MouseUp(object sender, MouseEventArgs e)
        {
            dragging1 = false;
        }

        private void MainForm_MouseDown(object sender, MouseEventArgs e)
        {
            dragging1 = true;
        }

        private void MainForm_MouseMove(object sender, MouseEventArgs e)
        {
            if (dragging1)
            {
                Point dif1 = new Point(Cursor.Position.X - this.Location.X, Cursor.Position.Y - this.Location.Y);
                if (dif1.X >= 823)
                this.Width =  dif1.X;
                if (dif1.Y >= 370)
                this.Height =  dif1.Y;

            }
        }

        private void RightBox_Move(object sender, MouseEventArgs e)
        {
            if (dragging1)
            {
                Point dif1 = new Point(Cursor.Position.X - this.Location.X, Cursor.Position.Y - this.Location.Y);
                if (dif1.X >= 823)
                    this.Width = dif1.X;
            }
        }

        private void AddBtn_Click(object sender, EventArgs e)
        {
            AddForm addForm = new AddForm();
            addForm.Show();
        }

        private void EventCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (EventCheckBox.Checked)
            { 
                ownEvents = true;
                ListBox.Enabled = true;
                ListBox.BackColor = Color.Black;
                CustomEventList.Visible = true;
            }
            else
            {
                ownEvents = false;
                ListBox.Enabled = false;
                ListBox.BackColor = Color.Red;
                CustomEventList.Visible = false;
            }
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            if (File.Exists(Application.StartupPath + "\\autostart.json"))
                File.Delete(Application.StartupPath + "\\autostart.json");
        }

        private void DownBox_MouseMove(object sender, MouseEventArgs e)
        {
            if (dragging1)
            {
                Point dif1 = new Point(Cursor.Position.X - this.Location.X, Cursor.Position.Y - this.Location.Y);
                if (dif1.Y >= 350)
                    this.Height = dif1.Y;
            }
        }

        private void SettingsSave_Changed(object sender, EventArgs e)
        {
            SaveChange();
        }

        private void SaveChange()
        {
            if (checkBoxSound.Checked == true)
                Settings1.Default.PlaySounds = true;
            else Settings1.Default.PlaySounds = false;

            if (checkBoxHelp.Checked == true)
            {
                Settings1.Default.Help = true;
                com0.Visible = true;
                com1.Visible = true;
                com2.Visible = true;
                com3.Visible = true;
                com7.Visible = true;
                TryTest.Top = 76;
                groupBox2.Height = 113;
                groupBox2.Top = this.Height - groupBox2.Height - 10;
                groupBox4.Height = 181;

                TimeMin.Top = 57;
                label2.Top = 60;
                label3.Top = 83;
                TimeMax.Top = 80;
                btnStart.Top = 149;
                groupBox1.Height = 187;
            }
            else
            {
                Settings1.Default.Help = false;
                com0.Visible = false;
                com1.Visible = false;
                com2.Visible = false;
                com3.Visible = false;
                com7.Visible = false;
                TryTest.Top = 44;
                groupBox2.Height = 84;
                groupBox2.Top = this.Height - groupBox2.Height - 10;

                TimeMin.Top = 42;
                label2.Top = 45;
                label3.Top = 63;
                TimeMax.Top = 64;
                btnStart.Top = 87;
                groupBox1.Height = 128;
                groupBox4.Height = 128;
            }

            if (checkBoxRound.Checked == true)
            {
                Settings1.Default.Round = true;
                RoundBox0.Visible = true;
                btnClose.BackgroundImage = Properties.Resources.btnCloseRound;
                RoundBox2.Visible = true;
                RoundBox3.Visible = true;
            }
            else
            {
                Settings1.Default.Round = false;
                RoundBox0.Visible = false;
                btnClose.BackgroundImage = Properties.Resources.btnClose;
                RoundBox2.Visible = false;
                RoundBox3.Visible = false;
            }

            if (checkBoxStart.Checked == true)
                Settings1.Default.StartAnimation = true;
            else
                Settings1.Default.StartAnimation = false;

            Settings1.Default.Save();
        }
    }
}
